//\\//\\------use------//\\//\\

"make" or "make compile" to compile files
"make example" to run example script
"make clean" to remove tilda files
"make clear" to remove compiled files and tilda files

suggested uses:
"python main.py <arguments>" (see below)
"make example clean"
"make example clear"

In order to run this program, you need to run the command "python main.py <arguments>" where <arguments> is a list of filenames of our graphics scripts. The edge and master transformation matrices carry over between the files if the command q is not used. If it is used, the two matrices are restarted and the code skips to the next filename in the list.

The command "make example" runs (among other things) "python main.py example.txt"

//\\//\\----deSCRIPTion----//\\//\\
- the script files are simple text files following a particular format
- every command is a seperate line
- any arguments necessary for a command are found on the next line seperated by spaces
- any unrecognized command is ignored and all commands are single letter words, so comments can be easily included
the following is a list of commands and their uses

q (quit) --0 arguments--
>>> end script

i (identity) --0 argumets--
>>> convert the transformation matrix into an identity matrix

w (wipe) --0 arguments--
>>> remove all edges from the edge matrix

a (apply) --0 arguments--
>>> apply the transformation matrix to the edge matrix

l (line) --6 arguments--
>>> adds a line segment to the edge matrix
00> x coordinate of first endpoint
01> y coordinate of first endpoint
02> z coordinate of first endpoint
03> x coordinate of second endpoint
04> y coordinate of second endpoint

s (scale) --3 arguments--
>>> applies a scale matrix to the transformation matrix
00> factor to scale by in the x direction
01> factor to scale by in the y direction
02> factor to scale by in the z direction

t (translate) --3 arguments--
>>> applies a translation matrix to the transformation matrix
00> amount to translate by in the x direction
01> amount to translate by in the y direction
02> amount to translate by in the z direction

x (x-axis rotation) --1 argument--
>>> applies an x-axis rotation matrix to the transformation matrix
00> degree measure of rotation angle

y (y-axis rotation) --1 argument--
>>> applies a y-axis rotation matrix to the transformation matrix
00> degree measure of rotation angle

z (z-axis rotation) --1 argument--
>>> applies a z-axis rotation matrix to the transformation matrix
00> degree measure of rotation angle

g (generate) --1 argument--
>>> generates a ppm format image file
00> filename to save image under

g (generate) --2 argument--
>>> generates a ppm format image file
00> filename to save image under
01> what to draw:
    	e for edges
	f for faces
	ef for faces over edges
	fe for edges over faces

g (generate) --3 arguments--
>>> generates a ppm format image file
00> filename to save image under
01> width of image
02> height of image

g (generate) --4 arguments--
>>> generates a ppm format image file
00> filename to save image under
01> width of image
02> height of image
03> what to draw:
    	e for edges
	f for faces
	ef for faces over edges
	fe for edges over faces

c (circle) --3 arguments--
>>> adds a circle in the z=0 plane to the edge matrix
00> x coordinate of the circle's center
01> y coordinate of the circle's center
02> radius of the circle

c (circle) --4 arguments--
>>> adds a circle in the z=0 plane to the edge matrix
00> x coordinate of the circle's center
01> y coordinate of the circle's center
02> radius of the circle
03> number of edges to use to approximate the circle

h (hermite curve) --8 arguments--
>>> adds a cubic hermite spline in the z=0 plane to the edge matrix
00> x coordinate of first endpoint
01> y coordinate of first endpoint
02> x coordinate of first helper point
03> y coordinate of first helper point
04> x coordinate of second endpoint
05> y coordinate of second endpoint
06> x coordinate of second helper point
07> y coordinate of second helper point

h (hermite curve) --9 arguments--
>>> adds a cubic hermite spline in the z=0 plane to the edge matrix
00> x coordinate of first endpoint
01> y coordinate of first endpoint
02> x coordinate of first helper point
03> y coordinate of first helper point
04> x coordinate of second endpoint
05> y coordinate of second endpoint
06> x coordinate of second helper point
07> y coordinate of second helper point
08> number of edges to use to approximate the spline

h (hermite curve) --12 arguments--
>>> adds a cubic hermite spline to the edge matrix
00> x coordinate of first endpoint
01> y coordinate of first endpoint
02> z coordinate of first endpoint
03> x coordinate of first helper point
04> y coordinate of first helper point
05> z coordinate of first helper point
06> x coordinate of second endpoint
07> y coordinate of second endpoint
08> z coordinate of second endpoint
09> x coordinate of second helper point
10> y coordinate of second helper point
11> z coordinate of second helper point

h (hermite curve) --13 arguments--
>>> adds a cubic hermite spline to the edge matrix
00> x coordinate of first endpoint
01> y coordinate of first endpoint
02> z coordinate of first endpoint
03> x coordinate of first helper point
04> y coordinate of first helper point
05> z coordinate of first helper point
06> x coordinate of second endpoint
07> y coordinate of second endpoint
08> z coordinate of second endpoint
09> x coordinate of second helper point
10> y coordinate of second helper point
11> z coordinate of second helper point
12> number of edges to use to approximate the spline

b (bezier curve) --8 arguments--
>>> adds a cubic bezier spline in the z=0 plane to the edge matrix
00> x coordinate of P1
01> y coordinate of P1
02> x coordinate of P2
03> y coordinate of P2
04> x coordinate of P3
05> y coordinate of P3
06> x coordinate of P4
07> y coordinate of P4

b (bezier curve) --9 arguments--
>>> adds a cubic bezier spline in the z=0 plane to the edge matrix
00> x coordinate of P1
01> y coordinate of P1
02> x coordinate of P2
03> y coordinate of P2
04> x coordinate of P3
05> y coordinate of P3
06> x coordinate of P4
07> y coordinate of P4
08> number of edges to use to approximate the spline

b (bezier curve) --12 arguments--
>>> adds a cubic bezier spline to the edge matrix
00> x coordinate of P1
01> y coordinate of P1
02> z coordinate of P1
03> x coordinate of P2
04> y coordinate of P2
05> z coordinate of P2
06> x coordinate of P3
07> y coordinate of P3
08> z coordinate of P3
09> x coordinate of P4
10> y coordinate of P4
11> z coordinate of P4

b (bezier curve) --13 arguments--
>>> adds a cubic bezier spline to the edge matrix
00> x coordinate of P1
01> y coordinate of P1
02> z coordinate of P1
03> x coordinate of P2
04> y coordinate of P2
05> z coordinate of P2
06> x coordinate of P3
07> y coordinate of P3
08> z coordinate of P3
09> x coordinate of P4
10> y coordinate of P4
11> z coordinate of P4
12> number of edges to use to approximate the spline

d (donut) --5 arguments--
>>> adds a torus wireframe mesh with inner radius perpendicular to the y direction to the edge matrix
00> x coordinate of the center point
01> y coordinate of the center point
02> z coordinate of the center point
03> the length of the outer radius
04> the length of the inner radius

d (donut) --6 arguments--
>>> adds a torus wireframe mesh with inner radius perpendicular to the y direction to the edge matrix
00> x coordinate of the center point
01> y coordinate of the center point
02> z coordinate of the center point
03> the length of the outer radius
04> the length of the inner radius
05> the types of lines to be drawn
    	d for diagonal lines
	l for lateral lines
	b for both sets of lines

d (donut) --7 arguments--
>>> adds a torus wireframe mesh with inner radius perpendicular to the y direction to the edge matrix
00> x coordinate of the center point
01> y coordinate of the center point
02> z coordinate of the center point
03> the length of the outer radius
04> the length of the inner radius
05> the number of pieces each vertical cross section will be cut into
06> the number of pieces each horizontal cross section will be cut into

d (donut) --8 arguments--
>>> adds a torus wireframe mesh with inner radius perpendicular to the y direction to the edge matrix
00> x coordinate of the center point
01> y coordinate of the center point
02> z coordinate of the center point
03> the length of the outer radius
04> the length of the inner radius
05> the types of lines to be drawn
    	d for diagonal lines
	l for lateral lines
	b for both sets of lines
06> the number of pieces each vertical cross section will be cut into
07> the number of pieces each horizontal cross section will be cut into

m (munchkin) --4 arguments--
>>> adds a sphere wireframe mesh to the edge matrix
00> x coordinate of the center point
01> y coordinate of the center point
02> z coordinate of the center point
03> the length of the radius

m (munchkin) --5 arguments--
>>> adds a sphere wireframe mesh to the edge matrix
00> x coordinate of the center point
01> y coordinate of the center point
02> z coordinate of the center point
03> the length of the radius
04> the types of lines to be drawn
    	d for diagonal lines
	l for latitude and longitude lines
	b for both sets of lines

m (munchkin) --6 arguments--
>>> adds a sphere wireframe mesh to the edge matrix
00> x coordinate of the center point
01> y coordinate of the center point
02> z coordinate of the center point
03> the length of the radius
04> the number of pieces each latitude curve will be cut into
05> the number of pieces each longitude curve will be cut into

m (munchkin) --7 arguments--
>>> adds a sphere wireframe mesh to the edge matrix
00> x coordinate of the center point
01> y coordinate of the center point
02> z coordinate of the center point
03> the length of the radius
04> the types of lines to be drawn
    	d for diagonal lines
	l for latitude and longitude lines
	b for both sets of lines
05> the number of pieces each latitude curve will be cut into
06> the number of pieces each longitude curve will be cut into

p (prism) --6 arguments--
>>> adds a wireframe mesh of a rectangular prism with sides parallel to the axes
00> x coordinate of a vertex of the prism
01> y coordinate of that vertex
02> z coordinate of that vertex
03> x coordinate of the opposite vertex
04> y coordinate of this vertex
05> z coordinate of this vertex

p (prism) --9 arguments--
>>> adds a wireframe mesh of a rectangular prism with sides parallel to the axes
00> x coordinate of a vertex of the prism
01> y coordinate of that vertex
02> z coordinate of that vertex
03> x coordinate of the opposite vertex
04> y coordinate of this vertex
05> z coordinate of this vertex
06> amount of pieces to cut the faces allong the x direction into
07> amount of pieces to cut the faces allong the y direction into
08> amount of pieces to cut the faces allong the z direction into